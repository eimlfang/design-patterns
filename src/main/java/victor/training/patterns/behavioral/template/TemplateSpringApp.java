// Generated by delombok at Wed Oct 14 12:32:37 EEST 2020
package victor.training.patterns.behavioral.template;

import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import java.util.Random;

public class TemplateSpringApp implements CommandLineRunner {
	public static void main(String[] args) {
		new TemplateSpringApp().run();
	}

	public void run(String... args) {
		placeOrder();
		shipOrder();
	}

	private void placeOrder() {
		// other logic
		new EmailService().sendOrderReceivedEmail("a@b.com", true);
		new EmailService().sendOrderReceivedEmail("a@b.com", true);
		new EmailService().sendOrderReceivedEmail("a@b.com", true);
		new EmailService().sendOrderReceivedEmail("a@b.com", true);
		new EmailService().sendOrderReceivedEmail("a@b.com", true);
	}

	private void shipOrder() {
		// other logic
		// TODO send order shipped email 'similar to how send order received was implemented'
		new EmailService().sendOrderReceivedEmail("a@b.com", false);
	}
}

class EmailService {
	public void sendOrderReceivedEmail(String emailAddress, boolean orderReceived) {
		EmailContext context = new EmailContext();
		/*smtpConfig,etc*/int MAX_RETRIES = 3;
		for (int i = 0; i < MAX_RETRIES; i++) {
			Email email = new Email(); // constructor generates new unique ID
			email.setSender("noreply@corp.com");
			email.setReplyTo("/dev/null");
			email.setTo(emailAddress);
			if (orderReceived) {
				email.setSubject("Order Received");
				email.setBody("Thank you for your order");
			} else {
				email.setSubject("Order Shipped");
				email.setBody("We've shipped your order. Hope it gets to you (this time)");
			}
			boolean success = context.send(email);
			if (success) break;
		}
	}
	
}

class EmailContext {
	public boolean send(Email email) {
		System.out.println("Trying to send " + email);
		return new Random(System.nanoTime()).nextBoolean();
	}
}

class Email {
	private String subject;
	private String body;
	private final long id = new Random(System.nanoTime()).nextLong();
	private String sender;
	private String replyTo;
	private String to;

	@java.lang.SuppressWarnings("all")
	public Email() {
	}

	@java.lang.SuppressWarnings("all")
	public String getSubject() {
		return this.subject;
	}

	@java.lang.SuppressWarnings("all")
	public String getBody() {
		return this.body;
	}

	@java.lang.SuppressWarnings("all")
	public long getId() {
		return this.id;
	}

	@java.lang.SuppressWarnings("all")
	public String getSender() {
		return this.sender;
	}

	@java.lang.SuppressWarnings("all")
	public String getReplyTo() {
		return this.replyTo;
	}

	@java.lang.SuppressWarnings("all")
	public String getTo() {
		return this.to;
	}

	@java.lang.SuppressWarnings("all")
	public Email setSubject(final String subject) {
		this.subject = subject;
		return this;
	}

	@java.lang.SuppressWarnings("all")
	public Email setBody(final String body) {
		this.body = body;
		return this;
	}

	@java.lang.SuppressWarnings("all")
	public Email setSender(final String sender) {
		this.sender = sender;
		return this;
	}

	@java.lang.SuppressWarnings("all")
	public Email setReplyTo(final String replyTo) {
		this.replyTo = replyTo;
		return this;
	}

	@java.lang.SuppressWarnings("all")
	public Email setTo(final String to) {
		this.to = to;
		return this;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof Email)) return false;
		final Email other = (Email) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		final java.lang.Object this$subject = this.getSubject();
		final java.lang.Object other$subject = other.getSubject();
		if (this$subject == null ? other$subject != null : !this$subject.equals(other$subject)) return false;
		final java.lang.Object this$body = this.getBody();
		final java.lang.Object other$body = other.getBody();
		if (this$body == null ? other$body != null : !this$body.equals(other$body)) return false;
		if (this.getId() != other.getId()) return false;
		final java.lang.Object this$sender = this.getSender();
		final java.lang.Object other$sender = other.getSender();
		if (this$sender == null ? other$sender != null : !this$sender.equals(other$sender)) return false;
		final java.lang.Object this$replyTo = this.getReplyTo();
		final java.lang.Object other$replyTo = other.getReplyTo();
		if (this$replyTo == null ? other$replyTo != null : !this$replyTo.equals(other$replyTo)) return false;
		final java.lang.Object this$to = this.getTo();
		final java.lang.Object other$to = other.getTo();
		if (this$to == null ? other$to != null : !this$to.equals(other$to)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof Email;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		final java.lang.Object $subject = this.getSubject();
		result = result * PRIME + ($subject == null ? 43 : $subject.hashCode());
		final java.lang.Object $body = this.getBody();
		result = result * PRIME + ($body == null ? 43 : $body.hashCode());
		final long $id = this.getId();
		result = result * PRIME + (int) ($id >>> 32 ^ $id);
		final java.lang.Object $sender = this.getSender();
		result = result * PRIME + ($sender == null ? 43 : $sender.hashCode());
		final java.lang.Object $replyTo = this.getReplyTo();
		result = result * PRIME + ($replyTo == null ? 43 : $replyTo.hashCode());
		final java.lang.Object $to = this.getTo();
		result = result * PRIME + ($to == null ? 43 : $to.hashCode());
		return result;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public java.lang.String toString() {
		return "Email(subject=" + this.getSubject() + ", body=" + this.getBody() + ", id=" + this.getId() + ", sender=" + this.getSender() + ", replyTo=" + this.getReplyTo() + ", to=" + this.getTo() + ")";
	}
}
