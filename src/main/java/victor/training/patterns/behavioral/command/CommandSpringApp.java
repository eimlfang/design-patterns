// Generated by delombok at Wed Oct 14 12:32:37 EEST 2020
package victor.training.patterns.behavioral.command;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.messaging.Sink;
import org.springframework.cloud.stream.messaging.Source;
import org.springframework.context.annotation.Bean;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;
import static java.util.Arrays.asList;
import static java.util.concurrent.CompletableFuture.supplyAsync;
import static victor.training.patterns.stuff.ThreadUtils.sleepq;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

@EnableAsync
@SpringBootApplication
@EnableBinding({Sink.class, Source.class})
public class CommandSpringApp {
   public static void main(String[] args) throws InterruptedException {
      SpringApplication.run(CommandSpringApp.class, args).close(); // Note: .close to stop executors after CLRunner finishes
      Thread.sleep(4000);
   }

   @Bean
   public ThreadPoolTaskExecutor executor() {
      ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
      executor.setCorePoolSize(1);
      executor.setMaxPoolSize(1);
      executor.setQueueCapacity(500);
      executor.setThreadNamePrefix("barman-");
      executor.initialize();
      executor.setWaitForTasksToCompleteOnShutdown(true);
      return executor;
   }
} 

@Component
class Drinker implements CommandLineRunner {
   private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(Drinker.class);
   @Autowired
   private Barman barman;
   @Autowired
   private ServiceActivatorPattern serviceActivatorPattern;

   // TODO [1] inject and use a ThreadPoolTaskExecutor.submit
   // TODO [2] make them return a CompletableFuture + @Async + asyncExecutor bean
   // TODO [3] wanna try it out over JMS? try out ServiceActivatorPattern
   public void run(String... args) throws InterruptedException, ExecutionException {
      log.debug("Submitting my order");
      log.debug("Waiting for my drinks...");
      
      CompletableFuture<Beer> futureBeer = supplyAsync(barman::pourBeer);
      CompletableFuture<Vodka> futureVodka = supplyAsync(barman::pourVodka);
//      invokeLater()

      futureBeer.thenCombineAsync(futureVodka, (b,v) -> new DillyDilly(b, v))
      .thenAcceptAsync(dilly -> {
    	  log.debug("Got my order in ms ! Enjoying {}", dilly);
				}/* , AWTEventQueue */);
      
      
      log.debug("My waiter leaves with my commands"); 
      
   }
}

class DillyDilly {
	private final Beer beer;
	private final Vodka vodka;
	public DillyDilly(Beer beer, Vodka vodka) {
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		this.beer = beer;
		this.vodka = vodka;
	}
	public Beer getBeer() {
		return beer;
	}
	public Vodka getVodka() {
		return vodka;
	}
}

@Service
class Barman {
   private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(Barman.class);

   public Beer pourBeer() {
      log.debug("Pouring Beer...");
      sleepq(1000);
      return new Beer();
   }

   public Vodka pourVodka() {
      log.debug("Pouring Vodka...");
      sleepq(1000);
      return new Vodka();
   }
}

class Beer {
}

class Vodka {
}
